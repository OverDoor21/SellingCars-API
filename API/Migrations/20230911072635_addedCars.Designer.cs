// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230911072635_addedCars")]
    partial class addedCars
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnginePower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Mileage")
                        .HasColumnType("float");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<double>("VoluemeofTank")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("LotId")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("API.Entities.CategoryCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Mini"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Small Cars"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Medium Cars"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Large Cars"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Executive Cars"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Luxury Cars"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Sport Cars"
                        },
                        new
                        {
                            Id = 8,
                            Category = "MultiPurpose Cars"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Jeeps"
                        });
                });

            modelBuilder.Entity("API.Entities.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("API.Entities.Lot", b =>
                {
                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("NameLot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LotId");

                    b.HasIndex("UserId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("LotId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RagionState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RagionState = "Greater Poland"
                        },
                        new
                        {
                            Id = 2,
                            RagionState = "Kuyavian-Pomeranian"
                        },
                        new
                        {
                            Id = 3,
                            RagionState = "Lesser Poland"
                        },
                        new
                        {
                            Id = 4,
                            RagionState = "Lodz"
                        },
                        new
                        {
                            Id = 5,
                            RagionState = "Lower Silesian"
                        },
                        new
                        {
                            Id = 6,
                            RagionState = "Lublin"
                        },
                        new
                        {
                            Id = 7,
                            RagionState = "Lubusz"
                        },
                        new
                        {
                            Id = 8,
                            RagionState = "Masovian"
                        },
                        new
                        {
                            Id = 9,
                            RagionState = "Opole"
                        },
                        new
                        {
                            Id = 10,
                            RagionState = "Podlasie"
                        },
                        new
                        {
                            Id = 11,
                            RagionState = "Pomeranian"
                        });
                });

            modelBuilder.Entity("API.Entities.TechnicalCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TechnicalCond")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalConditions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TechnicalCond = "New"
                        },
                        new
                        {
                            Id = 2,
                            TechnicalCond = "Old"
                        },
                        new
                        {
                            Id = 3,
                            TechnicalCond = "Damaged"
                        },
                        new
                        {
                            Id = 4,
                            TechnicalCond = "Without any Damage"
                        });
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Car", b =>
                {
                    b.HasOne("API.Entities.Lot", "Lot")
                        .WithOne("Car")
                        .HasForeignKey("API.Entities.Car", "LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("API.Entities.Description", b =>
                {
                    b.HasOne("API.Entities.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("API.Entities.Lot", b =>
                {
                    b.HasOne("API.Entities.CategoryCar", "CategoryCar")
                        .WithMany("Lots")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Description", "Description")
                        .WithOne()
                        .HasForeignKey("API.Entities.Lot", "LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Region", "Region")
                        .WithMany("Lots")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.TechnicalCondition", "TechnicalCondition")
                        .WithMany("Lots")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", "User")
                        .WithMany("Lots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryCar");

                    b.Navigation("Description");

                    b.Navigation("Region");

                    b.Navigation("TechnicalCondition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.HasOne("API.Entities.Lot", "Lot")
                        .WithMany("Photos")
                        .HasForeignKey("LotId");

                    b.HasOne("API.Entities.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("API.Entities.Photo", "UserId");

                    b.Navigation("Lot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.CategoryCar", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("API.Entities.Lot", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("API.Entities.Region", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("API.Entities.TechnicalCondition", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("Photo");
                });
#pragma warning restore 612, 618
        }
    }
}
